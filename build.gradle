plugins {
    id 'application'
    id 'com.github.johnrengelman.shadow' version '6.1.0'
    id 'com.github.spotbugs' version '4.6.0'
    id 'pmd'
    id 'checkstyle'
    id 'java-library'
    id 'org.bytedeco.gradle-javacpp-platform' version '1.5.5'
}

version = '1.7.0-SNAPSHOT'
group = 'app.gpx-animator'

mainClassName = 'app.gpx_animator.Main'
sourceCompatibility = JavaVersion.VERSION_16
targetCompatibility = JavaVersion.VERSION_16

repositories {
    mavenCentral()
}

configurations {
    developmentOnly
}

// We can set this on the command line, too: -PjavacppPlatform="linux-x86,linux-x86_64,macosx-x86_64,windows-x86,windows-x86_64"
ext {
    javacppPlatform = 'linux-x86,linux-x86_64,macosx-x86_64,windows-x86,windows-x86_64'
}

dependencies {
    compileOnly 'com.github.spotbugs:spotbugs-annotations:4.2.0'
    implementation 'org.bytedeco:javacv:1.5.5'
    implementation 'org.bytedeco:ffmpeg-platform-gpl:4.3.2-1.5.5'
    implementation 'javax.xml.bind:jaxb-api:2.3.1'
    implementation 'com.sun.xml.bind:jaxb-core:3.0.0'
    implementation 'org.glassfish.jaxb:jaxb-runtime:2.3.3'
    implementation 'javax.activation:activation:1.1.1'
    implementation 'org.slf4j:slf4j-api:1.7.30'
    implementation 'ch.qos.logback:logback-classic:1.2.3'
    implementation 'com.drewnoakes:metadata-extractor:2.15.0'
    implementation 'org.imgscalr:imgscalr-lib:4.2'
    implementation 'commons-io:commons-io:2.8.0'
    implementation 'com.jgoodies:jgoodies-forms:1.9.0'
    implementation 'com.vladsch.flexmark:flexmark-all:0.62.2'
    implementation 'org.reflections:reflections:0.9.12'
    testCompileOnly 'com.github.spotbugs:spotbugs-annotations:4.2.0'
    testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.7.0'
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.7.0'
    testImplementation 'org.junit.platform:junit-platform-engine:1.7.0'
}

test.classpath += configurations.developmentOnly
run.classpath += configurations.developmentOnly

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
    options.compilerArgs += ["-Xlint:deprecation", "-Xlint:unchecked"]
}

task copyChangelog(type: Copy) {
    from "."
    include "CHANGELOG.md"
    into "./src/main/resources"
}

task deleteChangelog(type: Delete) {
    delete "./src/main/resources/CHANGELOG.md"
}

task installGitHooks(type: Copy) {
    from new File(rootProject.rootDir, 'config/git/pre-push')
    into { new File(rootProject.rootDir, '.git/hooks') }
    fileMode 0755
}

def test = tasks.named("test") {
    useJUnitPlatform {
        excludeTags "it", "nightly"
    }
}

def it = tasks.register("it", Test) {
    useJUnitPlatform {
        includeTags "it"
    }
    shouldRunAfter test
}

def nightly = tasks.register("nightly", Test) {
    useJUnitPlatform {
        includeTags "nightly"
    }
    shouldRunAfter test
}

shadowJar {
    mergeServiceFiles()
}

spotbugs {
    toolVersion = '4.2.0'
}

spotbugsMain {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

spotbugsTest {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

checkstyle {
    configFile file("${projectDir}/config/checkstyle/checkstyle.xml")
    toolVersion "8.39"
}

pmd {
    toolVersion = "6.31.0"
    ruleSets = []
    ruleSetFiles = files("${projectDir}/config/pmd/pmd-rules.xml")
}

tasks.named('wrapper') {
    distributionType = Wrapper.DistributionType.ALL
}

task createVersionFile {
    doLast {
        def version = project.version.toString()
        def file = new File("$buildDir/resources/main/version.txt")
        file.write(version)
    }
}

compileJava.dependsOn copyChangelog
clean.dependsOn deleteChangelog
assemble.dependsOn check
check.dependsOn installGitHooks
jar.dependsOn createVersionFile
